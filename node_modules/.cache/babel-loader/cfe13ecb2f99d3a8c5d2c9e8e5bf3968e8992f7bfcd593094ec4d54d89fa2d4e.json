{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"C:/projects/Dapps/sev frontend/paywithsev/paywithSev/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/projects/Dapps/sev frontend/paywithsev/paywithSev/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/projects/Dapps/sev frontend/paywithsev/paywithSev/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"client\", \"children\", \"persistOptions\", \"onSuccess\"];\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as React from 'react';\nimport { persistQueryClient } from '@tanstack/query-persist-client-core';\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query';\nvar PersistQueryClientProvider = function PersistQueryClientProvider(_ref) {\n  var client = _ref.client,\n    children = _ref.children,\n    persistOptions = _ref.persistOptions,\n    onSuccess = _ref.onSuccess,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isRestoring = _React$useState2[0],\n    setIsRestoring = _React$useState2[1];\n  var refs = React.useRef({\n    persistOptions: persistOptions,\n    onSuccess: onSuccess\n  });\n  React.useEffect(function () {\n    refs.current = {\n      persistOptions: persistOptions,\n      onSuccess: onSuccess\n    };\n  });\n  React.useEffect(function () {\n    var isStale = false;\n    setIsRestoring(true);\n    var _persistQueryClient = persistQueryClient(_objectSpread(_objectSpread({}, refs.current.persistOptions), {}, {\n        queryClient: client\n      })),\n      _persistQueryClient2 = _slicedToArray(_persistQueryClient, 2),\n      unsubscribe = _persistQueryClient2[0],\n      promise = _persistQueryClient2[1];\n    promise.then(function () {\n      if (!isStale) {\n        refs.current.onSuccess == null ? void 0 : refs.current.onSuccess();\n        setIsRestoring(false);\n      }\n    });\n    return function () {\n      isStale = true;\n      unsubscribe();\n    };\n  }, [client]);\n  return /*#__PURE__*/React.createElement(QueryClientProvider, _extends({\n    client: client\n  }, props), /*#__PURE__*/React.createElement(IsRestoringProvider, {\n    value: isRestoring\n  }, children));\n};\nexport { PersistQueryClientProvider };","map":{"version":3,"names":["PersistQueryClientProvider","_ref","refs","React","useRef","onSuccess","_persistQueryClient","persistQueryClient","_objectSpread","current","persistOptions","queryClient","client","_persistQueryClient2","_slicedToArray","unsubscribe","promise","isStale","createElement","QueryClientProvider","_extends","value","isRestoring"],"sources":["C:\\projects\\Dapps\\sev frontend\\paywithsev\\paywithSev\\node_modules\\@tanstack\\react-query-persist-client\\src\\PersistQueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { PersistQueryClientOptions } from '@tanstack/query-persist-client-core'\nimport { persistQueryClient } from '@tanstack/query-persist-client-core'\nimport type { QueryClientProviderProps } from '@tanstack/react-query'\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query'\n\nexport type PersistQueryClientProviderProps = QueryClientProviderProps & {\n  persistOptions: Omit<PersistQueryClientOptions, 'queryClient'>\n  onSuccess?: () => void\n}\n\nexport const PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}: PersistQueryClientProviderProps): JSX.Element => {\n  const [isRestoring, setIsRestoring] = React.useState(true)\n  const refs = React.useRef({ persistOptions, onSuccess })\n\n  React.useEffect(() => {\n    refs.current = { persistOptions, onSuccess }\n  })\n\n  React.useEffect(() => {\n    let isStale = false\n    setIsRestoring(true)\n    const [unsubscribe, promise] = persistQueryClient({\n      ...refs.current.persistOptions,\n      queryClient: client,\n    })\n\n    promise.then(() => {\n      if (!isStale) {\n        refs.current.onSuccess?.()\n        setIsRestoring(false)\n      }\n    })\n\n    return () => {\n      isStale = true\n      unsubscribe()\n    }\n  }, [client])\n\n  return (\n    <QueryClientProvider client={client} {...props}>\n      <IsRestoringProvider value={isRestoring}>{children}</IsRestoringProvider>\n    </QueryClientProvider>\n  )\n}\n"],"mappings":";;;;;;;;;;AAaO,IAAAA,0BAAA,YAAAA,2BAAAC,IAAA,EAAoC;EAAA,I;;;;;;;;;EAQzC,IAAAC,IAAA,GAAAC,KAAA,CAAAC,MAAA;;IAA4CC,SAAA,EAAAA;EAAlB;;;;MAGSA,SAAA,EAAAA;;;;;;IAMjC,IAAAC,mBAAA,GAAAC,kBAAA,CAAAC,aAAA,CAAAA,aAAA,KAAAN,IAAA,CAAAO,OAAA,CAAAC,cAAA;QAEEC,WAAA,EAAAC;MAAA,GAFgD;MAAAC,oBAAA,GAAAC,cAAA,CAAAR,mBAAA;MAAlDS,WAAA,GAAAF,oBAAA;MAAAG,OAAA,GAAAH,oBAAA;;;;;MASG;;IAGH;MACEI,OAAA;;;;EAKJ,oBAAAd,KAAA,CAAAe,aAAA,CAAAC,mBAAA,EAAAC,QAAA;IACuBR,MAAA,EAAAA;;IACES,KAAA,EAAAC;;AAG1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}